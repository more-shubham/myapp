// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas = ["inventory"]
}

model Event {
  id                   Int      @id @default(autoincrement())
  name                 String
  date                 String
  time                 String
  location             String
  totalRevenue         String
  totalRevenueChange   String
  ticketsAvailable     Int
  ticketsSold          Int
  ticketsSoldChange    String
  pageViews            String
  pageViewsChange      String
  status               String
  imgUrl               String
  thumbUrl             String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  orders Order[]

  @@map("events")
  @@schema("inventory")
}

model Customer {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  address      String
  country      String
  countryCode  String
  flagUrl      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  orders Order[]

  @@map("customers")
  @@schema("inventory")
}

model Order {
  id            Int      @id @default(autoincrement())
  date          String
  amountUsd     String
  amountCad     String
  fee           String
  net           String
  transactionId String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Foreign Keys
  customerId Int
  eventId    Int

  // Relations
  customer Customer @relation(fields: [customerId], references: [id])
  event    Event    @relation(fields: [eventId], references: [id])
  payment  Payment?

  @@map("orders")
  @@schema("inventory")
}

model Payment {
  id         Int      @id @default(autoincrement())
  cardNumber String
  cardType   String
  cardExpiry String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Foreign Keys
  orderId Int @unique

  // Relations
  order Order @relation(fields: [orderId], references: [id])

  @@map("payments")
  @@schema("inventory")
}

model Country {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  code    String   @unique
  flagUrl String
  regions String[]

  @@map("countries")
  @@schema("inventory")
}


model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  OrganizationUser OrganizationUser[]

  @@map("users")
  @@schema("inventory")
}

model Organization {
  id        BigInt   @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  OrganizationUser OrganizationUser[]

  @@map("organizations")
  @@schema("inventory")
}

model Role {
  id        BigInt   @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  OrganizationUser OrganizationUser[]

  @@map("roles")
  @@schema("inventory")
}

model OrganizationUser {
  id            Int      @id @default(autoincrement())
  userId        String
  roleId        BigInt
  organizationId BigInt

  // Relations
  user         User         @relation(fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])
  role         Role         @relation(fields: [roleId], references: [id])

  @@map("organization_users")
  @@schema("inventory")
}